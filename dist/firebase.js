"use strict";var __createBinding=(this&&this.__createBinding)||(Object.create?(function(o,m,k,k2){if(k2===undefined)k2=k;Object.defineProperty(o,k2,{enumerable:true,get:function(){return m[k];}});}):(function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];}));var __setModuleDefault=(this&&this.__setModuleDefault)||(Object.create?(function(o,v){Object.defineProperty(o,"default",{enumerable:true,value:v});}):function(o,v){o["default"]=v;});var __importStar=(this&&this.__importStar)||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!=="default"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};Object.defineProperty(exports,"__esModule",{value:true});exports.FirebaseHelper=void 0;const admin=__importStar(require("firebase-admin"));class FirebaseHelper{initializeApp(serviceAccount){admin.initializeApp({credential:admin.credential.cert(serviceAccount),databaseURL:serviceAccount.databaseURL,});return{firestore:admin.firestore(),realtime:admin.database()};}
getUserById(userId){return admin.auth().getUser(userId).then((user)=>user).catch((error)=>console.log(error));}
getUserByEmail(email){return admin.auth().getUserByEmail(email).then((user)=>user).catch((error)=>console.log(error));}
getUserByPhone(phone){return admin.auth().getUserByPhoneNumber(phone).then((user)=>user).catch((error)=>console.log(error));}
deleteUser(userId){return new Promise((resolve)=>{admin.auth().deleteUser(userId).then(()=>{resolve(true);}).catch((error)=>{console.log(error);resolve(false);});});}
deleteUsers(userIds){userIds.map((userId)=>{this.deleteUser(userId).then(()=>{console.log('Successfully deleted user: ',userId);}).catch((error)=>console.log(error));});}
createUser(userInfo){return new Promise((resolve)=>{admin.auth().createUser(userInfo).then((userRecord)=>{resolve({status:true,data:userRecord,});}).catch((error)=>{resolve({status:false,data:error.message,});});});}
updateUser(userId,userInfo){return new Promise((resolve)=>{admin.auth().updateUser(userId,userInfo).then((userRecord)=>{resolve({status:true,data:userRecord,});}).catch((error)=>{resolve({status:false,data:error.message,});});});}
getAllUsers(maxResults=1000){return admin.auth().listUsers(maxResults).then((listUsersResult)=>listUsersResult.users).catch((error)=>{console.log('Error listing users:',error);});}
auth(){return admin.auth();}}
exports.FirebaseHelper=FirebaseHelper;